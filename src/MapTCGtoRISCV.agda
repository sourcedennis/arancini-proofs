{-# OPTIONS --safe #-}


module MapTCGtoRISCV where

-- Stdlib imports
open import Level using (Level; _‚äî_) renaming (zero to ‚Ñìzero)
open import Function using (id)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ; [_,_])
open import Data.Product using (_√ó_; ‚àÉ-syntax)
open import Data.Empty using (‚ä•)
open import Data.List using (_‚à∑_; [])
open import Data.List.Membership.Propositional using () renaming (_‚àà_ to _‚àà‚Çó_)
open import Relation.Nullary using (¬¨_; Dec)
open import Relation.Unary using (Pred; _‚àà_; _‚àâ_)
-- Library imports
open import Dodo.Unary
open import Dodo.Binary hiding (REL)
open import Burrow.Template.Mapping as Œî
-- Local imports: Architectures
open import Arch.TCG as TCG
open import Arch.RISCV as RISCV


-- Mapping - TCG ‚áí RISCV
--
-- Instruction mapping:
--
-- LD       ‚Ü¶  LD
-- ST       ‚Ü¶  ST
-- RMW      ‚Ü¶  RMW_SC
--
-- F_RR   ‚Ü¶  F_RR
-- F_RW   ‚Ü¶  F_RW
-- F_RM   ‚Ü¶  F_RM
-- F_WR   ‚Ü¶  F_WR
-- F_WW   ‚Ü¶  F_WW
-- F_WM   ‚Ü¶  F_WM
-- F_MR   ‚Ü¶  F_MR
-- F_MW   ‚Ü¶  F_MW
-- F_MM   ‚Ü¶  F_MM
--
--
-- Corresponding event mapping:
--
-- R·µ£         ‚Ü¶  R·µ£
-- W·µ£         ‚Ü¶  W·µ£
-- R‚Çê;rmw;W‚Çê  ‚Ü¶  R‚Çê;rmw;W‚Çê  || successful RMW
-- R‚Çê         ‚Ü¶  R‚Çê         || failed RMW
--
-- F_RR   ‚Ü¶  F_RR
-- F_RW   ‚Ü¶  F_RW
-- F_RM   ‚Ü¶  F_RM
-- F_WR   ‚Ü¶  F_WR
-- F_WW   ‚Ü¶  F_WW
-- F_WM   ‚Ü¶  F_WM
-- F_MR   ‚Ü¶  F_MR
-- F_MW   ‚Ü¶  F_MW
-- F_MM   ‚Ü¶  F_MM

rule-ac : TCG.AccessClass ‚Üí RISCV.AccessClass
rule-ac ùê¥R = ùê¥R
rule-ac ùê¥W = ùê¥W
rule-ac ùê¥M = ùê¥M

rule-labf : TCG.LabF ‚Üí RISCV.LabF
rule-labf (x ùêπ y) = (rule-ac x) ùêπ (rule-ac y)

record TCG‚áíRISCV
    (src : Execution {arch-TCG})
    {dst : Execution {arch-RISCV}}
    (dst-rv : RISCVExecution dst) : Set where
    
  open Œî.Defs
  open TCG.LabR
  open TCG.LabW
  open RISCVExecution dst-rv

  field
    -- Instrs: LD ‚Ü¶ LDR
    -- Events: R·µ£(x,v) ‚Ü¶ R·µ£(x,v)
    rule-ld : ‚àÄ {a : EventTCG} {x : Location} {v : Value}
      ‚Üí EvR‚Çå x v (lab-r tmov) a
      ‚Üí a ‚àà events src
      ‚Üí ‚àÉ[ a' ] (a' ‚àà events dst √ó EvR‚Çå x v (lab-r tmov ann-none) a')

    -- Instrs: ST ‚Ü¶ STR
    -- Events: W·µ£(x,v) ‚Ü¶ W·µ£(x,v)
    rule-st : ‚àÄ {a : EventTCG} {x : Location} {v : Value}
      ‚Üí EvW‚Çå x v (lab-w tmov) a
      ‚Üí a ‚àà events src
      ‚Üí ‚àÉ[ a' ] (a' ‚àà events dst √ó EvW‚Çå x v (lab-w tmov ann-none) a')


    -- Instrs: RMW        ‚Ü¶  RMW_SC
    -- Events: R‚Çê;rmw;W‚Çê  ‚Ü¶  R‚Çê;rmw;W‚Çê  || successful RMW
    --         R‚Çê         ‚Ü¶  R‚Çê         || failed RMW

    rule-rmw-dom : ‚àÄ {a : EventTCG} {x : Location} {v : Value}
      ‚Üí EvR‚Çå x v (lab-r trmw) a
      ‚Üí a ‚àà events src
      ‚Üí ‚àÉ[ a' ] (a' ‚àà events dst √ó EvR‚Çå x v (lab-r trmw ann-acqrel) a')
      
    rule-rmw-codom : ‚àÄ {a : EventTCG} {x : Location} {v : Value}
      ‚Üí EvW‚Çå x v (lab-w trmw) a
      ‚Üí a ‚àà events src
      ‚Üí ‚àÉ[ a' ] (a' ‚àà events dst √ó EvW‚Çå x v (lab-w trmw ann-acqrel) a')

    rule-rmw-ok : ‚àÄ {a b : EventTCG} {x : Location} {v‚ÇÅ v‚ÇÇ : Value}
      ‚Üí EvR‚Çå x v‚ÇÅ (lab-r trmw) a
      ‚Üí EvW‚Çå x v‚ÇÇ (lab-w trmw) b
      ‚Üí rmw src a b
      ‚Üí ‚àÉ[ a' ] ‚àÉ[ b' ] (rmw dst a' b' √ó EvR‚Çå x v‚ÇÅ (lab-r trmw ann-acqrel) a' √ó EvW‚Çå x v‚ÇÇ (lab-w trmw ann-acqrel) b')

    rule-rmw-fail : ‚àÄ {a : EventTCG} {x : Location} {v : Value}
      ‚Üí EvR‚Çå x v (lab-r trmw) a
      ‚Üí a ‚àà events src
      ‚Üí a ‚àâ dom (rmw src)
      ‚Üí ‚àÉ[ a' ] (a' ‚àà events dst √ó EvR‚Çå x v (lab-r trmw ann-acqrel) a' √ó a' ‚àâ dom (rmw dst))

    -- Both instrs and events. Basically, the fences remain the same.
    -- F_RR   ‚Ü¶  F_RR
    -- F_RW   ‚Ü¶  F_RW
    -- F_RM   ‚Ü¶  F_RM
    -- F_WR   ‚Ü¶  F_WR
    -- F_WW   ‚Ü¶  F_WW
    -- F_WM   ‚Ü¶  F_WM
    -- F_MR   ‚Ü¶  F_MR
    -- F_MW   ‚Ü¶  F_MW
    -- F_MM   ‚Ü¶  F_MM

    rule-f : ‚àÄ {a : EventTCG} {f : TCG.LabF}
      ‚Üí EvF‚Çú f a
      ‚Üí a ‚àà events src
      ‚Üí ‚àÉ[ a' ] (a' ‚àà events dst √ó EvF‚Çú (rule-labf f) a')


private
  variable
    uid  : UniqueId
    tid  : ThreadId
    -- mode : F-mode
    loc  : Location
    val  : Value


-- RISCV programs mapped from TCG can only contain these events
data IsRISCVEventTCG : Pred‚ÇÄ EventRISCV where
  ev-init : IsRISCVEventTCG (event-init uid loc val)
  ev-skip : IsRISCVEventTCG (event-skip uid tid)
  -- read events produced from relaxed read instructions
  --   (i.e., no AMO/SC instr, no acq/rel annotations)
  ev-r·µ£   : IsRISCVEventTCG (event-r uid tid loc val (lab-r tmov ann-none))
  -- write events produced from relaxed write instructions
  --   (i.e., no AMO/SC instr, no acq/rel annotations)
  ev-w·µ£   : IsRISCVEventTCG (event-w uid tid loc val (lab-w tmov ann-none))
  -- read events produced by AMO instructions with acq/rel annotations
  ev-r‚Çê   : IsRISCVEventTCG (event-r uid tid loc val (lab-r trmw ann-acqrel))
  -- write events produced by AMO instructions with acq/rel annotations
  ev-w‚Çê   : IsRISCVEventTCG (event-w uid tid loc val (lab-w trmw ann-acqrel))
  -- basically, we can produce any memory fence. we *don't* produce TSO fences.
  ev-f    : (x y : RISCV.AccessClass) ‚Üí IsRISCVEventTCG (event-f uid tid (x ùêπ y))


record RISCV-TCGRestricted {ex : Execution {arch-RISCV}} (rv : RISCVExecution ex) : Set‚ÇÅ where
  open Œî.Restrict ex
  open RISCV.Relations rv
  
  field
    consistent : IsRISCVConsistent
    
    ev-bound : events ‚äÜ‚ÇÅ IsRISCVEventTCG


-- # Helpers

module _ {ex : Execution {arch-RISCV}} {rv : RISCVExecution ex} (ex-res : RISCV-TCGRestricted rv) where

  open Execution ex
  open RISCV-TCGRestricted ex-res


  ¬¨ev-bound : {ev : EventRISCV}
    ‚Üí ev ‚àà events
    ‚Üí ¬¨ (IsRISCVEventTCG ev)
    ‚Üí ‚ä•
  ¬¨ev-bound ev‚ààex ¬¨is-a8 = ¬¨is-a8 (‚äÜ‚ÇÅ-apply ev-bound ev‚ààex)


  module _ (wf : WellFormed ex) where
  
    open WellFormed wf


    po-bound : po ‚äÜ‚ÇÇ IsRISCVEventTCG √ó‚ÇÇ IsRISCVEventTCG
    po-bound = ‚äÜ‚ÇÇ-trans (√ó‚ÇÇ-lift-udr (‚áî‚ÇÅ-to-‚äÜ‚ÇÅ po-elements)) (√ó‚ÇÇ-lift ev-bound ev-bound)

    rf-bound : rf ‚äÜ‚ÇÇ IsRISCVEventTCG √ó‚ÇÇ IsRISCVEventTCG
    rf-bound = ‚äÜ‚ÇÇ-trans (√ó‚ÇÇ-lift-udr rf-elements) (√ó‚ÇÇ-lift ev-bound ev-bound)

    co-bound : co ‚äÜ‚ÇÇ IsRISCVEventTCG √ó‚ÇÇ IsRISCVEventTCG
    co-bound = ‚äÜ‚ÇÇ-trans (√ó‚ÇÇ-lift-udr co-elements) (√ó‚ÇÇ-lift ev-bound ev-bound)

    rmw-bound : rmw ‚äÜ‚ÇÇ IsRISCVEventTCG √ó‚ÇÇ IsRISCVEventTCG
    rmw-bound = ‚äÜ‚ÇÇ-trans rmw-def (‚äÜ‚ÇÇ-trans imm-‚äÜ‚ÇÇ po-bound)
